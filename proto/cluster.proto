syntax = "proto3";
package buildbuildbuild;

import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "build/bazel/remote/execution/v2/remote_execution.proto";

option go_package = "github.com/ricochet1k/buildbuildbuild/clusterpb";

// messages sent through UserEvent
message NodeMessage {
	string from = 1;

	NodeState state = 2;

	string subscribe = 3;
	string unsubscribe = 4;
	string publish = 5;
	Message publish_msg = 6;
}

message NodeState {
	int32 jobs_queued = 1;
	int32 jobs_running = 2;
	int32 jobs_slots_free = 3;
}

message StartJobReply {}

// messages sent through PubSub
message Message {
	oneof type {
		JobStatus job_status = 1;
	}
}

// messages sent through Query
message Query {
	// oneof type {
	// }
}

message JobStatus {
	build.bazel.remote.execution.v2.ExecutionStage.Value stage = 1;
	build.bazel.remote.execution.v2.ExecuteResponse response = 2;
	google.rpc.Status error = 3;
	build.bazel.remote.execution.v2.Digest action_digest = 4;
	repeated build.bazel.remote.execution.v2.Digest missing_digest = 5;
}


service Worker {
	rpc StartJob (StartJobRequest) returns (stream JobStatus) {}
	rpc FollowJob (FollowJobRequest) returns (stream JobStatus) {}
}

// this is essentially a copy of ExecuteRequest
message StartJobRequest {
	string id = 1;
	string instance_name = 2;
	build.bazel.remote.execution.v2.Digest action_digest = 3;
	bool skip_cache_lookup = 4;
	google.protobuf.Timestamp queued_timestamp = 5;
	build.bazel.remote.execution.v2.RequestMetadata request_metadata = 6;
}

message FollowJobRequest {
	string id = 1;
}
